#!/usr/bin/env python

from __future__ import division
import sys
import re
import pathlib
import pandas as pd
import argparse
import numpy as np
import warnings

def get_stats(results_path):
    """Generate forest output statistics.
    Calculates the total number of prize and hidden nodes in the optimal forest,
    the average degrees of hidden and prize nodes, and the percentage of prize nodes
    that are included in the optimal forest.
    """
    # Get the parameter values so they can be included in the output
    cfg = pd.read_csv(results_path + "forest_cfg",
    sep="=", names=["Param", "value"])
    cfg["Param"] = cfg["Param"].apply(lambda x: x.strip())
    w = int(cfg.loc[cfg.Param=="w", "value"])
    b = int(cfg.loc[cfg.Param=="b", "value"])
    D = int(cfg.loc[cfg.Param=="D", "value"])
    mu = float(cfg.loc[cfg.Param=="mu", "value"])
        
    param_string = "{}\t{}\t{}\t{}\t".format(w, b, D, mu)
    
    # Parse the total number of prize nodes out of the result info file
    # We do this with a regex since the file this info is contained in
    # isn't in an easily read format
    with open(results_path + "result_info.txt", 'r') as f:
        lines = f.readlines()       
    r = re.compile('There were [0-9]* terminals in the interactome')
    total_line = [line for line in lines if r.match(line)][0]
    total_prize_nodes = [int(s) for s in total_line.split()
                         if s.isdigit()][0]

    # Read in the list of nodes and the edges connecting them
    edge_attr = pd.read_csv(results_path + "result_edgeattributes.tsv",
                                  sep="\t")
    node_attr = pd.read_csv(results_path + "result_nodeattributes.tsv",
                                  sep="\t")

    # The forest generated by the steiner tree algorithm can be empty
    if node_attr.empty:
        values =  "{}\t{}\t{}\t{:.2f}\t{:.2f}\t{:.2f}\n".format(total_prize_nodes,
                                                                0, 0, 0, 0, 0, 0)
        
    
    # Nodes are either prize nodes or hidden. In the input file, this is
    # specified as "Proteomic" or NaN. Change it to "Prize" and "Hidden".
    node_attr.TerminalType = node_attr.TerminalType.apply(lambda x:
                                                          "Prize" if
                                                          x == "Proteomic"
                                                          else "Hidden")

    # Parse out the source and target of each edge
    edge_attr["source"] = edge_attr.Edge.apply(lambda x:
                                                          x.split(' ')[0])
    edge_attr["target"] = edge_attr.Edge.apply(lambda x:
                                               x.split(' ')[2])

    
    def node_type(name):
        """Lookup if a node is hidden or prize based on associated gene name."""
        row = node_attr.loc[node_attr.Protein==name]
        return row.TerminalType.values[0]

    # For each edge, create columns for the source and target types
    edge_attr["source_type"] = edge_attr.source.apply(node_type)
    edge_attr["target_type"] = edge_attr.target.apply(node_type)

    # Count the number of prize and hidden nodes among sources and targets
    source_counts = edge_attr.source_type.value_counts()
    target_counts = edge_attr.target_type.value_counts()

    # Count the number of prize and hidden nodes among all nodes
    type_counts = node_attr.TerminalType.value_counts()
    pnodes_in_forest = type_counts.Prize
    hnodes_in_forest  = type_counts.Hidden

    # Percent of prize nodes included in the optimal forest
    percent_prize = pnodes_in_forest/total_prize_nodes

    # Calculate the average degree of prize and total nodes
    prize_total_degree = source_counts.Prize + target_counts.Prize
    hidden_total_degree = source_counts.Hidden + target_counts.Hidden
    avg_degree_prize = prize_total_degree/type_counts.Prize
    avg_degree_hidden = hidden_total_degree/type_counts.Hidden

    stats = "{}\t{}\t{}\t{:.2f}\t{:.2f}\t{:.2f}\n".format(total_prize_nodes,
                                                                 pnodes_in_forest,
                                                                 hnodes_in_forest,
                                                                 percent_prize,
                                                                 avg_degree_prize,
                                                                 avg_degree_hidden)
    return param_string + stats


if __name__ =="__main__":
    np.warnings.filterwarnings("ignore")
    parser = argparse.ArgumentParser(description="Generate output statistics for forest")
    parser.add_argument("results_path")
    args = parser.parse_args()
    results_path = args.results_path
    sys.stdout.write(get_stats(results_path))




    

    

    

    
